---
title: "Interactive Vaccine Dashboard"
format: 
  dashboard: 
    theme: minty
    orientation: columns
    nav-buttons: 
     - icon: github
       href:  https://github.com/lilypcook/lab-3
       aria-label: GitHub
     - icon: linkedin
       href: https://www.linkedin.com/in/lilypaintoncook/
       aria-label: LinkedIn
server: shiny
logo: worldlogo.png
---

```{r}
#| label: libraries
#| message: false
#| context: setup

library(tidyverse)
library(readxl)
library(forcats)
library(cowplot)
library(RColorBrewer)
library(kableExtra)
library(shiny)

```

```{r}
#| label: data load
#| message: false
#| context: setup

data.full <- read_csv("datafull.csv")

vaccinepct <- data.full %>% select(country, region, Q28) %>% drop_na() %>% 
  group_by(region, country) %>% 
  summarise(tot = n(), 
            totyes = sum(Q28==1), 
            pctyes = totyes/tot) %>%
  mutate(pctgroup = case_when(
    pctyes < 0.7 ~ 1,
    pctyes >= 0.7 & pctyes < 0.8 ~ 2,
    pctyes >= 0.8 & pctyes < 0.9 ~ 3,
    pctyes >= 0.9 & pctyes < 0.95 ~ 4,
    pctyes >= 0.95 ~ 5
  ))


countrymean <- mean(vaccinepct$pctyes)


percents <- data.full %>% select(country, region, Q25) %>% 
  drop_na() %>%
  mutate(agree = ifelse(Q25 < 3, 1, 0)) %>% 
  group_by(country, region) %>%
  summarise(totagree = sum(agree), 
            tot = n(), 
            pctagree = totagree/tot)

medians <- percents %>%
  group_by(region)%>%
  summarise(medregion = median(pctagree))

lowcountry <- percents[which(percents$pctagree == min(percents$pctagree)),]$country
lowpercent <- percents[which(percents$pctagree == min(percents$pctagree)),]$pctagree

highcountry <- percents[which(percents$pctagree == max(percents$pctagree)),]$country
highpercent <- percents[which(percents$pctagree == max(percents$pctagree)),]$pctagree

USApercent <- percents[which(percents$country == "United States"),]$pctagree

avgpercent <- mean(percents$pctagree)

lowvaxcountry <- vaccinepct[which(vaccinepct$pctyes == min(vaccinepct$pctyes )),]$country
lowvax <- vaccinepct[which(vaccinepct$pctyes == min(vaccinepct$pctyes )),]$pctyes

highvaxcountry <- vaccinepct[which(vaccinepct$pctyes == max(vaccinepct$pctyes )),]$country
highvax <- vaccinepct[which(vaccinepct$pctyes == max(vaccinepct$pctyes )),]$pctyes

USAvax <- vaccinepct[which(vaccinepct$country == "United States"),]$pctyes


```

# Belief in Vaccines

## inputs {.sidebar}

```{r}
checkboxGroupInput("selected_regions", "Select Regions:",
                   choices = unique(percents$region),
                   selected = unique(percents$region))

checkboxInput("show_median", "Show Region Medians", value = TRUE)

```


## Distribution {width=80%}


```{r}
#| label: dot plot
#| message: false
#| context: server

output$dot_plot <- renderPlot({

  filtered_data <- percents %>%
    filter(region %in% input$selected_regions)
  
  filtered_medians <- medians %>%
    filter(region %in% input$selected_regions)

  p <- ggplot(filtered_data) +
    facet_wrap(~region, ncol = 1) +
    geom_dotplot(aes(x = pctagree, fill = region),
                 method = "histodot",
                 dotsize = 0.6,
                 binwidth = 0.01) +
    geom_text(aes(x = 0.3, y = 0.5, label = region, color = region),
              hjust = "inward",
              size = 7,
              family = "Times",
              fontface = "bold") +
    scale_fill_brewer(palette = "Set2") +
    scale_color_brewer(palette = "Set2") +
    theme_minimal() +
    theme(legend.position = "none",
          panel.grid.major.y = element_blank(),
          panel.grid.minor.y = element_blank(),
          axis.text.y = element_blank(),
          strip.text = element_blank(),
          text = element_text(family = "Times"),
          plot.title = element_text(face = "bold")) +
    scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
    labs(
      title = "Percent of people who believe vaccines are safe by country and global region",
      subtitle = if (input$show_median) "Black lines represent region median" else "",
      x = "", y = ""
    )

  if (input$show_median) {
    p <- p + geom_vline(data = filtered_medians, aes(xintercept = medregion), color = "black")
  }

  p
})

output$avgcard <- renderText({
  filtered_data <- percents %>%
    filter(region %in% input$selected_regions)
  
  mean <- mean(filtered_data$pctagree)
  
  paste(round(mean * 100, 2), "%")
})

```

```{r}
plotOutput("dot_plot")
```

## Cards {width=20%}

### Avg

```{r}
#| content: valuebox
#| title: Average Country-Wide Belief in Safety of Vaccines
#| color: info
#| icon: globe

list(value = paste(round(avgpercent*100,2), "%"))

```

### Max

```{r}
#| content: valuebox
#| title: Belief in Safety of Vaccines in United States
#| color: secondary
#| icon: bandaid-fill

list(value = paste(round(USApercent * 100, 2), "%"))

```

### icon
```{r}
#| content: valuebox
#| title: Average Belief of Selected Regions
#| color: success
#| icon: emoji-smile


textOutput("avgcard")

```

# Vaccination Rates

## slider {.sidebar}

```{r}

#| label: slider


sliderInput("percent_filter", 
             label = "Minimum Vaccination Rate (%)", 
             min = 0, 
             max = 100, 
             value = 50, 
             step = 1)

```

```{r}
#| label: check box

checkboxGroupInput("selected_regions2", "Select Regions:",
                   choices = unique(percents$region),
                   selected = unique(percents$region))

```


## Table

```{r}
#| context: server
output$country_table <- renderTable({
  req(input$percent_filter)
  threshold <- input$percent_filter  

  filtered_table <- vaccinepct %>%
    filter(region %in% input$selected_regions2) %>%
    filter(pctyes * 100 >= threshold) %>%  
    select(country, region, pctyes) %>%
    arrange(pctyes) %>%
    rename(Country = country,
           Region = region,
      `Vaccination Rate` = pctyes
    )

  filtered_table$`Vaccination Rate` <- scales::percent(filtered_table$`Vaccination Rate`, accuracy = 1)
  
filtered_table
})

```


```{r}
tableOutput("country_table")
```

